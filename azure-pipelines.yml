pool:
  vmImage: 'windows-2022'

trigger:
  - main
  - release/*

# steps:
#  - bash: |
#     whereis mono
#     sudo apt install gtk-sharp2
#     git clone --recurse-submodules https://github.com/mono/SkiaSharp.git
#     cd SkiaSharp
#     dotnet tool restore
#     dotnet cake --target=externals-download
#     msbuild /r /v:d /p:Configuration=Release /p:BuildingInsideUnoSourceGenerator=true source/SkiaSharp.Views.Uno/SkiaSharp.Views.Uno.Wasm/SkiaSharp.Views.Uno.Wasm.csproj
#     # dotnet cake --target=libs --skipExternals="all"

# resources:
#   containers:
#   - container: nv-bionic-wasm
#     image: unoplatform/wasm-build:3.0

stages:
- stage: Build
  jobs:
  - job: Matrix_Gen
    displayName: Test Matrix Generation
    steps:
      - pwsh: |
          $matrixGroups = @{
            'Group0' = @{
                'unoCheckArgs' = '--pre-major'
                'validations' =
                    '
                      Recommended;-preset recommended|Blank;-preset blank
                    '
            }
            'Group1' = @{
                'unoCheckArgs' = '--pre-major'
                'validations' = 
                    '
                      Recommended;-preset recommended|Blank;-preset blank
                    '
            }
          }

          $matrixAsJson = $matrixGroups | ConvertTo-Json
          $matrixAsJson = $matrixAsJson.Replace("`r`n","")

          echo "json: $matrixAsJson"

          echo "##vso[task.setvariable variable=legs;isOutput=true]$matrixAsJson"
        name: mtrx

  - job: runner
    dependsOn: Matrix_Gen

    strategy:
      matrix: $[ dependencies.Matrix_Gen.outputs['mtrx.legs'] ]

    steps:
    # - pwsh: |
    #     $validationsArray = ("$(validations)" -split '\r?\n').Trim()

    #     foreach($v in $validationsArray)
    #     {
    #       $fields = ("$v" -split ';').Trim()

    #       $vsoVar="vso[task.setvariable variable=TEMPLATEVALIDATION_$($fields[0]);isoutput=true]$($fields[1])";

    #       echo "##$vsoVar"
    #       echo "$vsoVar"
    #     }

    - pwsh: |
        echo "validations: $(validations)"
        echo "validations: ${{ variables['validations'] }}"

    - ${{ each v in split(variables['validations'], '|') }}:
        - script: |
            echo 'v: ${{ v }}'
            echo 'v split: ${{ split(v,';')[1] }}'
          displayName: ${{ split(v,';')[0] }}

