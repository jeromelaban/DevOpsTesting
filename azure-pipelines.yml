pool:
  vmImage: 'ubuntu-latest'

trigger:
  - main
  - release/*

# steps:
#  - bash: |
#     whereis mono
#     sudo apt install gtk-sharp2
#     git clone --recurse-submodules https://github.com/mono/SkiaSharp.git
#     cd SkiaSharp
#     dotnet tool restore
#     dotnet cake --target=externals-download
#     msbuild /r /v:d /p:Configuration=Release /p:BuildingInsideUnoSourceGenerator=true source/SkiaSharp.Views.Uno/SkiaSharp.Views.Uno.Wasm/SkiaSharp.Views.Uno.Wasm.csproj
#     # dotnet cake --target=libs --skipExternals="all"


stages:
- stage: Build
  jobs:
  - job: Build

    pool:
      vmImage: 'windows-2022'

    steps:
    - checkout: self
      clean: 'true'
      fetchDepth: 0

    - checkout: self
      clean: true
      
    - pwsh: |
        # Set-PSDebug -Trace 1
    
        # Workaround from https://github.com/actions/runner-images/issues/6844#issuecomment-1367225048
        # At the time of this comment (30-12-2022) this only works on Azure DevOps hosted
        # agents and doesn't work on 1ES images
        Write-Host "wsl --update --web-download"
        wsl --update --web-download | Out-String
  
        Write-Host "wsl --version" 
        wsl --version
  
        write-host "WSL install of ubuntu."
        wsl --install -d Ubuntu-22.04 --web-download
  
        write-host "Launch WSL."
        $wsl = wsl -l -v | out-string
  
        write-host $wsl
  
        # workaround for encoding issue: https://github.com/microsoft/terminal/issues/110
        while ($wsl -notmatch "R`0u`0n`0n`0i`0n`0g") {
            start-sleep -seconds 1
            $wsl = wsl -l -v | out-string
            write-host $wsl
        }
        write-host "Ubuntu installed."
  
      displayName: Install WSL
  
    - pwsh: |
        wsl wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
        wsl sudo dpkg -i packages-microsoft-prod.deb
        wsl rm packages-microsoft-prod.deb  
        wsl sudo apt-get update
        wsl sudo apt-get install -y ninja-build lbzip2
        wsl sudo apt-get install -y dotnet-sdk-7.0
      displayName: Install WSL dependencies




- stage: Prepare
  condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')))
  jobs:
  - job: Sign
  
    pool:
      vmImage: 'windows-2022'

    steps:

    - powershell: |
        echo Prepare job

      displayName: Echo

- stage: Publish_Dev
  condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), not(eq(variables['build.reason'], 'PullRequest')))
  dependsOn: Prepare
  jobs:
  - deployment: 'Nuget'
    displayName: 'Nuget Publish Dev'
    environment: 'Uno Studio Development'
    strategy:
      runOnce:
        deploy:
          steps:
          - powershell: |
              echo Prepare job

            displayName: Echo

- stage: Publish_Prod
  condition: and(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), not(eq(variables['build.reason'], 'PullRequest')))
  dependsOn: Prepare
  jobs:
  - deployment: 'Nuget_Prod_Dev'
    displayName: 'Nuget Publish Prod Dev'
    environment: 'Uno Studio Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - powershell: |
              echo Prepare job

            displayName: Echo
  
  - deployment: 'Nuget_Prod_Nuget_Ord'
    displayName: 'Nuget Publish Prod NuGet.org'
    environment: 'Uno Studio Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - powershell: |
              echo Prepare job

            displayName: Echo
